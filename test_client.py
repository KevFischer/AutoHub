from fastapi.testclient import TestClient
from main import app


client = TestClient(app, raise_server_exceptions=False)
usr = "TestClientUser"
email = "Test@Client.mail"
phone = "123456789"
pw = "T3$Tcl1enT"
token = ""


def test_account():
    """
    Test the Account Use-Case
    by registering and logging in
    after registering.
    """
    response = client.post(url="/register/", json={
        "username": usr,
        "email": email,
        "phone": phone,
        "password": pw
    })
    assert response.status_code == 200
    response = client.post(url="/login/", json={
        "email": email,
        "password": pw
    })
    assert response.status_code == 200
    global token
    token = response.json()["token"]


def test_forum():
    """
    Test the Forum Use-Cases
    by creating an post, get the post
    and answering it.
    Finally, we will delete the post.
    """
    response = client.post(url="/forum/", json={
        "topic": "We are Testing our forum post route.",
        "content": "Maybe it will work, maybe it wont, who knows"
    }, headers={"token": token})
    assert response.status_code == 200
    new_post = response.json()
    response = client.get(url=f"/forum/{new_post['postID']}", headers={"token": token})
    assert response.status_code == 200
    response = client.post(url=f"/forum/answer/{new_post['postID']}", json={
        "content": "This could be a new answer if the program works"
    }, headers={"token": token})
    assert response.status_code == 200
    response = client.delete(url=f"/forum/{new_post['postID']}", headers={"token": token})
    assert response.status_code == 200


def test_event():
    """
    Testing the Event Use-Cases
    We will create, view, join
    and finally delete it
    """
    response = client.post(url="/event/", json={
        "eventname": "Testing events",
        "location": "Location will be revealed if test works",
        "appointment": "2022-01-01T00:00:00",
        "maxAttendants": 5,
        "description": "This event was generated by the integration test, so if you see this, ignore it :)"
    }, headers={"token": token})
    assert response.status_code == 200
    new_event = response.json()
    response = client.get(url=f"/event/{new_event['eventID']}", headers={"token": token})
    assert response.status_code == 200
    response = client.post(url=f"/event/join/{new_event['eventID']}", headers={"token": token})
    assert response.status_code == 200
    response = client.delete(url=f"/event/{new_event['eventID']}", headers={"token": token})
    assert response.status_code == 200


def test_offer():
    """
    Test the offer use-cases
    Testing by creating, viewing,
    and deleting the offer.
    """
    response = client.post(url="/offer/", json={
        "brand": "TestBrand",
        "model": "TestModel",
        "price": 9999,
        "firstRegistration": "2000-01-01T00:00:00",
        "mileage": 1,
        "fuelType": "TestFuelType",
        "location": "Non Existant",
        "roadworthy": "Fahrtauglich",
        "description": "If u see this, something went wrong with the tests."
    }, headers={"token": token})
    assert response.status_code == 200
    new_offer = response.json()
    response = client.get(url=f"/offer/{new_offer['offerID']}", headers={"token": token})
    assert response.status_code == 200
    response = client.delete(url=f"/offer/{new_offer['offerID']}", headers={"token": token})
    assert response.status_code == 200


def test_clean():
    """
    Delete existing datasets used by tests.
    """
    response = client.delete(url=f"account/{email}/delete")
    assert response.status_code == 200
